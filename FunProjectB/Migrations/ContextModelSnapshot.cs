// <auto-generated />
using System;
using FunProjectB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FunProjectB.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FunProjectB.Models.Cities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Continent_ID")
                        .HasColumnType("int");

                    b.Property<int>("ContinentsID")
                        .HasColumnType("int");

                    b.Property<int>("CountriesID")
                        .HasColumnType("int");

                    b.Property<int?>("Country_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContinentsID");

                    b.HasIndex("CountriesID");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("FunProjectB.Models.Continents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Continents", (string)null);
                });

            modelBuilder.Entity("FunProjectB.Models.Countries", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("ContinentsID")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContinentsID");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("FunProjectB.Models.Cities", b =>
                {
                    b.HasOne("FunProjectB.Models.Continents", "Continents")
                        .WithMany()
                        .HasForeignKey("ContinentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FunProjectB.Models.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continents");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("FunProjectB.Models.Countries", b =>
                {
                    b.HasOne("FunProjectB.Models.Continents", "continents")
                        .WithMany()
                        .HasForeignKey("ContinentsID");

                    b.Navigation("continents");
                });
#pragma warning restore 612, 618
        }
    }
}
